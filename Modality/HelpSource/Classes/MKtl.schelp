CLASS:: MKtl
summary:: A class for creating and accessing external controllers
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/MKtlDesc, Classes/MKtlDevice, Classes/MKtlElementGroup, Classes/MKtlElement


DESCRIPTION::

NOTE::
For a guided tour, start reading at link::Overviews/Modality::,
for a tutorial on most of what MKtl does, see link::Tutorials/ModalityTutorial::,
for how to add your own controllers, see link::Tutorials/How_to_create_a_description_file::
::

MKtl provides an easy to use interface for devices you can connect to your computer through MIDI, HID, OSC and possibly later Serial and other protocols. Beyond that, you will be able to use it for GUI based controllers.

code:: MKtl.find; :: searches for all controllers connected to your machine, and returns a list of available devices. Or, if you already know which controller you want to use, you can create it directly by name, and MKtl will find and return that controller. If it does not find it, e.g. because the physical controller is not there, it creates a virtual MKtl, which can be used to open a GUI that replaces the controller.

For most devices, this requires that someone has made a description file for the device; if there is none, it is easy to make one following the instructions here:
link::Tutorials/How_to_create_a_description_file::

MKtls can also be nested by composing several MKtls; for instance, the iControl ... creates both MIDI and HID devices for communication. For an example and background, see link::Classes/CompMKtl::.


CLASSMETHODS::
PRIVATE:: initClass, prAddDefaultSpecs

METHOD:: all
all currently available MKtls.
code::
MKtl.all;
::


METHOD:: find
Find all currently connected controllers.
This method calls the find method on all of MKtlDevice's subclasses, and will post a list of available MKtl devices.
code::
MKtl.find;
::

METHOD:: protocols, deviceTypes, elementTypesUsed
the currently supported protocols, deviceTypes, and elementTypes used in loaded description files.
code::
MKtl.protocols;
MKtl.deviceTypes;
MKtl.elementTypes;
::

METHOD:: new
Accesses an existing instance of MKtl with the given name, or creates a new instance with that name. As with e.g. JITLib proxies like Ndef, Tdef, Pdef, or OSCdef, MIDIdef etc.

code::
// nickname to give the MKtl, and a string as name of description file
k = MKtl('mynano2', "korg-nanokontrol2");

// description file name can also contain wildcards to match:
l = MKtl('op1', "*op-1");

// if you have several devices of the same kind connected,
// say two nanoKontrol2s, you can get to each of them by multiIndex:
m = MKtl('nk2A', "korg-nanokontrol2", multiIndex: 0);
n = MKtl('nk2B', "korg-nanokontrol2", multiIndex: 1);

// Note that this is the index of the list of multiples only,
// and in the order they show up in the system,
// as is posted from MKtl.find. If you connect your
// devices to the same plugs, they will get the same multiIndex again.

// if lookupName is a Symbol, it will look for devices by key in MKtlLookup.all:
m = MKtl('nk2C', 'midi2_orSimilar');

MKtlLookup.all.keys.postcs;

// if lookupName is an MKtlDesc, it will look for devices by key in MKtlLookup.all:
MKtlDesc.loadDescs;
m = MKtl('nk2D', MKtlDesc.allDescs['korg-nanokontrol2']);

::

argument:: name
The name of the controller as you want to refer to it.

argument:: lookupNameOrDesc
The device description or lookupName to be used. This can be:
list::
## strong:: a String :: - the file name of a description file (without extension, possibly with wildcards)
## strong:: a Symbol :: the lookupName of a device that was found by MKtl.find (useful when no desc file exists),
## an link::Classes/MKtlDesc:: object, or
## strong:: a dictionary :: that is a well-formed MKtlDesc full description dict, see link::Tutorials/How_to_create_a_description_file::
::

argument:: lookForNew
a flag whether or not to look for newly attached devices or newly added device descriptions. Default is false. Will always look for devices and device descriptions the first time you open an MKtl.

argument:: multiIndex
if several devices of identical make are present, multiIndex is the index within this array of identical devices. The order is alphabetical by deviceLookupName, and will be reproduceable if the same set of devices is connected.

argument:: tryOpenDevice
if true, MKtl will try to open the physical device if present.


SUBSECTION:: Using specs in MKtl

METHOD:: globalSpecs
A class dictionary of all preset ControlSpecs used by various controller elements.

METHOD:: addSpec, getSpec
add and access by name a ControlSpec in MKtl's dictionary of specs

argument:: key
the name by which to store the spec

argument:: spec
The ControlSpec or a symbol or array that can be converted to a spec.
code::
MKtl.globalSpecs;
MKtl.addSpec(\bipolar, [-1, 1]);
MKtl.getSpec(\bipolar);
::


SUBSECTION:: Description files and MKtlDesc

These methods are all redirected to MKtlDesc.

METHOD:: postLoadableDescs
post the filenames of all loadable device descriptions.
For more details on using description files, see link::Classes/MKtlDesc::

METHOD:: postLoadedDescs
post all currently loaded device descriptions.

METHOD:: descFolders
the folder(s) where MKtlDesc finds description files.

METHOD:: openDescFolder
open folder(s) at index containing description files.

METHOD:: loadDescsMatching
load device description file(s) matching with name from indicated folder(s).

Method:: descIsFaulty
test whether the given desc is faulty.

code::
MKtl.postLoadableDescs;
MKtl.postLoadedDescs;
MKtl.descFolders;
MKtl.openDescFolder(0);
MKtl.loadDescsMatching("*run-n-drive*");
::

subsection:: miscellaneous

METHOD:: postPossible
post all possible (i.e. currently connected or known) devices for the protocol(s) given.
MKtl.postPossible;

Method:: makeLookupName
make a lookupName for a device based on (typically) its protocol, id number and productName.
code::
MKtl.makeLookupName(\hid, 0, "Run'N'Drive - Wireless");
MKtl.makeLookupName(\midiSrc, 0, "nanoKEY");
// osc - is ip addr and port good here?
MKtl.makeLookupName(\osc, "127.0.0.1_57110", "sclang");
::

INSTANCEMETHODS::

METHOD:: name
get and set the name (a Symbol) of the MKtl.
This also changes the name under which the MKtl is stored in Mktl.all.
code::
MKtl(\test, "korg-nanokontrol2");
MKtl(\test).name_(\mynano2);
MKtl.all; // \test is gone now, use \mynano2 instead
::

METHOD:: gui
Open a gui representation for the MKtl, which shows the state of the MKtl's elements and can do all their actions.
code::
MKtl(\mynano2).gui;
::


METHOD:: specs, addLocalSpec, addSpec, getSpec
a local dict for special specs to use with this MKtl's elements or groups.
code::
MKtl(\mynano2).specs;
MKtl(\mynano2).addSpec(\angle, [-pi, pi]);
MKtl(\mynano2).getSpec(\angle);
::

SUBSECTION:: MKtl description

METHOD:: desc
the MKtlDesc object that holds the device information from the description file.
It is used to build the elements and groups of this MKtl.
code::
a = MKtl(\mynano2).desc;
a.fullDesc;		// a dict loaded from the description file
a.fullDesc.keys;	// the keys of the items in it
a.protocol;			// e.g. the protocol used
a.elementsDesc; 	// the dict of the elements described
a.postElements; 	// post element names and keys/indices in hierarchical order
::
For more, see link::Classes/MKtlDesc::

METHOD::rebuild
Rebuild all elements of the MKtl based on the new description file given.
warning:: This will also remove any actions defined for the MKtl elements and groups! Only use rebuild when you are sure that you want to replace the device description with a new one.::

SUBSECTION:: Devices

METHOD:: openDevice
Open the hardware device for this MKtl if it was not opened already. It will look automatically for an appropriate device.

argument:: lookAgain
Whether or not to look for newly attached hardware devices.

argument:: multiIndex
Needed when using multiple identical devices to identify which one to create.

code::
// while the run'n'drive is not yet attached,
// this creates a virtual device
m = MKtl( 'funky', "*run-n-drive" );
m.clear;
m.trace(true);
HIDFunc.trace(true);
MKtl.all.removeAt(\funky);

// now I found my run'n'drive and plugged it in:
m.openDevice; // finds it automatically
::

METHOD:: hasDevice
test whether MKtl has a device (a MIDI/HID/OSCMKtlDevice)
code::
m.hasDevice
::

METHOD:: closeDevice
Closes the hardware device if it was open.

METHOD:: device, mktlDevice
The instance of MKtlDevice that this MKtl uses.
(mktlDevice is a deprecated alias for device)

METHOD:: free
Frees the MKtl again and forgets about its existence.
If there was an device, this closes it.

METHOD:: resetActions
Reset all actions of the elements in this code::MKtl:: to code::nil::.
argument:: includeGroups
if code::true::, also actions of contained groups are reset.

METHOD:: trace
set the flag whether incoming data are posted or not, default true.

METHOD:: traceRunning
the flag whether incoming data are posted or not.

METHOD::enable, disable
enable and disable this MKtl, so one can make multiple MKtls (with different setups of elements) for the same physical device.

METHOD::sync
send all current MKtl values to the physical device, e.g. to move all motorfaders to a freshly recalled preset.


SUBSECTION:: Elements of the MKtl

METHOD:: elementGroup, elements
All the control elements (MKtlElement) on the device you may want to listen or talk to. this returns an link::Classes/MKtlElementGroup:: containing a hierarchical tree of link::Classes/MKtlElement::s, organised via link::Classes/MKtlElementGroup::.
(elements is a deprecated alias of elementGroup).
code::
MKtl(\funky).elementGroup;
::

METHOD:: namedDict
A dict for adding elements or groups by name, so they can be accessed by name.
For example, this can be used to reorganize the elements of a fader box into channels as on a mixer.
See link::Tutorials/Creating_Named_Groups:: and link::Tutorials/Coding_for_Modal_Flexibility::


METHOD:: elementNames
An alphabetical list of all elementNames in the MKtl.
m = MKtl(\funky);
m.elementNames;

METHOD:: postElements
A pretty printed hierarchical list of the names and indices of all elements
code::
m.postElements;
::

METHOD:: elementsDict
all elements in one flat event so they can be accessed very fast by name.
code::
m.elementsDict;
m.dictAt('joy_r_hat');
::

METHOD:: inputElements, outputElements
code::
// collect all elements that have inputs:
m.inputElements
//  all elements that have outputs:
m.outputElements
::

METHOD:: elementsOfType, elementsNotOfType
return all elements that are of the type given, or not
code::
m.elementsOfType(\slider);
m.elementsNotOfType(\slider);
::

METHOD:: elementsLabeled
return all elements which have been given a label
code::
o = MKtl(\opi1, "teenage*");
o.elementsLabeled(\white);
::

subsection:: Accessing elements and groups

METHOD:: elAt, elementAt
Access an element or group in the elementGroup or in groups by
hierarchical indices or names.
Supports nil and \all as wildcards, and multi-expands correctly.

code::
k = MKtl(\mynano2, "korg-nanokontrol2");
k.elementGroup;
k.elAt; // the same top group

k.elAt(\tr); // the group of transport elements (in top group)
k.elAt(\tr, \rew); // a button in the \tr group

k.elAt(\not, \there); // returns nil for non-existent names

k.elAt(\sl); // the group of all sliders
k.elAt(\sl, 0); // the first slider by index
k.elAt(\sl, \1); // the first slider by name
k.elementGroup[\sl][0]; // same lookup by hand

k.elAt(\bt); // the group of all buttons
k.elAt(\bt, \S); // the S buttons
k.elAt(\bt, \M, \1); // the first  button

// nil or \all are wildcards:
k.elAt(\all, 0); // the first element in every group
k.elAt(nil, 0); // the first element in every group

// arrays of keys and indexes allowed
k.elAt([\sl, \tr], 3); // the fourth slider and tr button

k.elAt(\bt, [0, 2]); // the S and R buttons

::

METHOD:: dictAt
Access an element in the elementsDict directly by its full name.
This is a very fast lookup.
code:: MKtl(\mynano2).dictAt(\sl_1); ::

METHOD:: collAt
Access an element in the collectivesDict by hierarchical name.

METHOD:: at
Access an element in the top elementGroup by index.
code:: MKtl(\mynano2).at(0); ::


subsection:: Getting and setting element values

METHOD:: valueAt, deviceValueAt
Access an element's value and deviceValue (in the deviceSpec range) by the direct element key

code::
m = MKtl( 'funky', "*run-n-drive" );
m.valueAt( \compass );
m.valueAt( \bt_2 );

m.deviceValueAt( \compass );
m.deviceValueAt( \bt_2 );
m.deviceValueAt( \joy_l_x );
::

METHOD:: setValueAt, setDeviceValueAt
Set an element's value or deviceValue directly by element key

subsection:: Getting and setting multiple elements

METHOD:: getKeysValues
get multiple key/value pairs for a list of element keys.
this is intended for more robust storage of presets.
code::
m.getKeysValues; // gets all keys and values
m.getKeysValues( [\compass, \wheel] ); // get specific ones
m.getKeysValues( [\joy_l_x, \joy_l_y, \joy_r_x, \joy_r_y, ] );
m.getKeysValues( m.elAt(\bt).collect(_.name) ); // the bt group
::

METHOD:: setKeysValues
set multiple key/value pairs from a list of key/value arrays.
code::
m.setKeysValues( [[\compass, 0.125], [\wheel, 1.0]] ); // two elements
m.gui;
::

METHOD:: setKVAction
same as setKeysValues, but with doAction of the elements being set


METHOD:: set
set multiple key/value pairs from a list of key, value arguments.
m.set(\joy_l_x, 1.0.rand, \joy_l_y, 1.0.rand, \joy_r_x,1.0.rand,  \joy_r_y, 1.0.rand);
m.gui;

METHOD:: setAction
same as set, but with doAction of the elements being set

METHOD:: send
Send the value of the element to the hardware device; called if you set the value of an MKtlElement that is an output.

SUBSECTION:: Exploration of a device

See link::Tutorials/How_to_create_a_description_file:: for a full discussion on this.

METHOD:: explore

When a device doesn't have a description file yet, explore can be used to help in creating one.

METHOD:: exploring
Returns a Boolean whether or not a device is currently being explored.

METHOD:: createDescriptionFile
When a device doesn't have a description file yet, this method can be used to create a description file.

METHOD:: specialMessages
a dict of special messages for this device, typically to change setup on a MIDI device by sending it a sysex message.

METHOD:: sendSpecialMessage
send specialMessage with that name to the device

Subsection:: Adding named groups and elements

One can add named elements to an MKtl and access them by name.
For a full discussion, see link::Tutorials/Creating_Named_Groups ::.

Method::addNamed
add an element or group to the mktl's namedDict,
so they can be accessed by user given names.

This can be used to name single elements by the same function name
across different devices - e.g. call one button \play, another \stop,
no matter what its name in the device description may be:

code::
k = MKtl(\nk2, "*trol2");
// in a nanoKontrol2, put all transport buttons (in group \tr)
// in k.namedDict, so they can be accessed without the \tr prefix:
k = MKtl(\nk2, "*trol2");
k.elAt(\tr).do { |el| k.addNamed(el.elemDesc.key, el); };
k.namedDict.keys;
k.elAt(\play);
k.elAt(\stop);
::

Subsection:: Collectives

METHOD:: collectivesDict, collectiveDescriptionFor

These are mainly used internally in OSCMKtlDevice, see
link::Tutorials/How_to_create_a_description_file_for_OSC::

Subsection:: Methods for finding info on available devices in MKtlLookup.
METHOD:: lookupInfo, lookupName, updateLookupInfo

private:: checkAllCtls, checkIdentical
private:: wrapCollElemsInGroups, specialMessageNames, sendSpecialMessage, prMatchedElements
PRIVATE:: storeArgs, printOn, init, makeElements, makeCollectives, finishInit
