TITLE:: MKtlDesc
summary:: handling descriptions of interface devices in Modality
categories:: Modality
related:: Overviews/Modality, Classes/MKtl, Reference/MKtl_description_files, Classes/MKtlElement, Classes/MKtlElementGroup, Reference/Naming_conventions_in_element_descriptions

DESCRIPTION::

MKtlDesc can read description files for hardware interface devices into link::Classes/MKtlDesc:: instances.
Usually, this happens automatically when an link::Classes/MKtl:: is instantiated.

note::
The file syntax can be found at link::Reference/MKtl_description_files::, element description keys can be found at link::Reference/Naming_conventions_in_element_descriptions::.
::

Some examples:

Which devices are supported by Modality?
Look at the webpage:

code::
MKtlDesc.web; // SC-internal webView
MKtlDesc.docURI.openOS; // open in browser
::


Folders:

code::
MKtlDesc.defaultFolder;			  // where modality puts descriptions
MKtlDesc.userFolder;			  // where user can put personalized descriptions

MKtlDesc.addFolder("~/Desktop/"); // Add custom folders if desired
MKtlDesc.descFolders;			  // which show up here
MKtlDesc.openFolder(0);			  // open by index, 0 is defaultFolder, 1 is userFolder
MKtlDesc.openFolder(1);
::

Loading:

code::
MKtlDesc.loadDescs;				// load all description files
MKtlDesc.loadDescs("*nano*");	// or matching ones
MKtlDesc.loadDescs("nano*", folderIndex: 0); // in specific places
::

Global inspection:

code::
MKtlDesc.allDescs;				// all currently loaded descs
MKtlDesc('korg-nanokey2').dump;	// look at one
MKtlDesc('korg-nanokey2').web;	// open its web documentation
::


Make an MKtlDesc from a desc filename

code::
x = MKtl/Desc.fromFileName("korg-nanokontrol2");
x.openFile;			// open its file
x.fullDesc			// the dict that contains all the info
x.fullDesc.keys;	// the description items:
x.protocol;			// one of [\midi, \hid, \osc];
x.idInfo.postcs;	// the device name under which it registers in the OS
x.fullDesc[\testCode].cs; // optional testCode, wrapped into a function

x.elementsDesc;		// the hierarchical description of the elements
x.elAt(\sl);		// access single elements or groups by name or index
x.elAt(\sl, 0);		// access elements by name or index
x.elementsDict.keys;

x.postInfo;			// post overview info
x.postInfo(postElements: true); // and the elements too
x.postElements;

// generate default test code for a desc name:
MKtlDesc.defaultTestCode("korg-nanokontrol");
MKtlDesc("*nanokontrol").testCode;
// in its own document for quick testing
MKtlDesc("*nanokontrol").openTestCode;

// nanokontrol2 has specific testCode in the desc itself
d = MKtlDesc("*nanokontrol2");
d.fullDesc[\testCode];
d.testCode;
::

CLASSMETHODS::

PRIVATE:: initClass, docURI, parentExt, webview

METHOD:: defaultFolder
the path where the folder for MKtlDesc files lives.

METHOD:: userFolder
the path where users can put personalized MKtlDesc files.

METHOD:: folderName
the name of the defaultFolder and userFolder.

METHOD:: descFolders
all descFolders within which to look for MKtlDesc files.

METHOD:: addFolder
add a folder to descFolders

METHOD:: openFolder
open folder(s) in descFolders by index.

METHOD:: loadDescs
load matching descriptions in descFolders.

METHOD:: allDescs
dict of all currently loaded descs

METHOD:: postStatus
post status and name of all loaded descs
code::
MKtlDesc.postStatus;
::

METHOD:: postLoadable
post the filenames of descs that can be loaded
code::
MKtlDesc.postLoadable;
::

METHOD:: postLoaded
post currently loaded descs
code::
MKtlDesc.postLoaded;
::

METHOD:: descKeysUsed
collect all element keys used in loaded descs
code::
MKtlDesc.descKeysUsed;
::

METHOD:: deviceTypesUsed
collect all device types used in loaded descs
code::
MKtlDesc.deviceTypesUsed;
::

METHOD:: elementTypesUsed
collect all element types used in loaded descs
code::
MKtlDesc.elementTypesUsed;
::

METHOD:: notePair
make a pair of noteOn, noteOff elements
code::
MKtlDesc.notePair(\padL, 13);
::
METHOD:: notePairs
make pairs for a list of key, note pairs
code::
MKtlDesc.notePairs([[\padL, 13], [\padL, 21]]).printAll;
::


METHOD:: isValidDescDict
check whether dict is a valid description dict.

PRIVATE:: isValidElemDesc, isValidHIDDesc, isValidMIDIDesc, isValidOSCDesc, isElemFunc, sharePropsToElements


METHOD:: new
create an MKtlDesc with a name, from a well-formed description file.

METHOD:: at
access an MKtlDesc by name in the global repository

METHOD:: fromFileName
create an MKtlDesc from a file.
ARGUMENT:: filename
filename without path or extension, will be looked for in descfolders.
ARGUMENT:: folderIndex
in which folder of descFolders to search the file
ARGUMENT:: multi
flag whether to load multiple matching files


METHOD:: fromDict
create an MKtlDesc from a well-formed description dict.

METHOD:: findFile
find the filepath for a given desc name.

METHOD:: fromPath
create an MKtlDesc from a full file path.

METHOD:: web
get info for an MKtlDesc on the web
code::
MKtlDesc.web;
MKtlDesc("*manta").web;
MKtlDesc.webview;
::

SUBSECTION:: internal methods

Method:: compExt, descExt
legal extensions for filenames

Method:: fileToIDDict
a dictionary that contains the idInfos for every desc file

Method:: idInfoForFilename
find device idInfo for given filename

Method:: filenamesForIDInfo
find filenames for a given device idInfo

Method:: writeCache, cacheName, loadCache, updateCache
support methods for cache of filenames and idInfos


Method:: platformSpecific
Set code::false:: to disable platform specific replacements.
NOTE::This will break standard code::MKtl:: functionality and is only needed for rendering documentation!::

private:: fillMidiDefaults, resolveForPlatform, isElementTestFunc, findParent, prMakeElemColls, makeElemKeys, defaultTestCode


INSTANCEMETHODS::

METHOD:: idInfo
get the string by which the hardware device registers to the OS.

METHOD:: protocol
get and set the hardware protocol of the device.

METHOD:: deviceFilename
get the filename of the desc file

METHOD:: testCode
returns code to test a controller with this description.

METHOD:: openTestCode
Opens a Document with code to test a controller with this description.

METHOD:: fullDesc
get MKtlDesc's properties, or set them from a dict
fullDesc.elementsDesc contains the description of all elements

METHOD:: elementsDesc
the hierarchical dict that contains the description of all elements

METHOD:: elAt
access element descriptions hierarchically

METHOD:: elementsDict
the flat dict that contains descriptions of all elements by compound lookup name

METHOD:: dictAt
access element descriptions by compound hierarchic lookup name

METHOD::  web
open a webview on the device's info page at Modality website.

METHOD:: openFile
open the desc file from which the MKtlDesc was generated

METHOD:: postInfo
post info on the device, if postElements = true, also info on the elements

METHOD:: postElements
post info on the elements

METHOD:: path
the path where file was read (if so)

METHOD:: writeFile
not done yet - should eventually write a well-formed description file
at path based on its current data.

PRIVATE:: init, storeArgs, printOn, writeCache, loadCache

private:: docURI, elementsDesc, elementsDesc = type, getMidiMsgTypes, inferName, name, resolveDescEntriesForPlatform, specialMessage, specialMessageNames, findParent, makeElemKeys, prMakeElemColls

Examples::

code::
// matching with generic desc files is done automatically now.

// still, here an example for matching with a generic desc by hand:
d = MKtlDesc.loadDescs("generic-mouse").first;
m = MKtl.find(\hid);
// we found an optical mouse with an hid ID, so make an MKtl,
m = MKtl('m', 'hid_5_usb_optical_mouse');

// generic-mouse desc matches, no extra elements on either side
d.matchWithHID(m.device.source);

// -> this should happen automatically when no desc is found.
// to test matching:
// remove middle button in desc -> now elements remain onlyInDesc
d.elementsDict.removeAt(\bt_middle);
d.matchWithHID(m.device.source);
// remove hid elem 5 in HID -> now elements remain onlyInHID as well
m.device.source.elements.removeAt(5);
d.matchWithHID(m.device.source);

/********** TESTS ********/
// groupType expansion:

a = (midiNum: 12, style: (width: 0.5, height: 2));

// call funcs directly
MKtlDesc.groupFuncs['noteOnTrig'].value(a);
MKtlDesc.groupFuncs['noteOnVel'].value(a);

MKtlDesc.groupFuncs['noteOnOff'].value(a);
MKtlDesc.groupFuncs['noteOnOffBut'].value(());
MKtlDesc.groupFuncs['noteOnOffVel'].value(());

MKtlDesc.groupFuncs['noteOnOffCtl'].value(());
MKtlDesc.groupFuncs['noteOnOffTouch'].value(());
MKtlDesc.groupFuncs['noteOnOffVelTouch'].value(());

// lookup as it happens in deepExpand
MKtlDesc.expandElemToGroup(a, 'noteOnOff');

// tests for deepExpand:

~groupType = \noteOnTrig;
~groupType = \noteOnVel;

~elems = MKtlDesc.deepExpand(
	(key: \pad,
		elements: (48..51).collect { |num, i|
			( midiNum: num, groupType: ~groupType,
				style: (row: i % 4, column: i div: 4) )
		}
	)
).printAll; "";
~elems.collect(_.elements).flat.size; // 4


// these expand to two each
~groupType = 'noteOnOff';
~groupType = 'noteOnOffBut';
~groupType = 'noteOnOffVel';

~elems = MKtlDesc.deepExpand(
	(key: \pad,
		elements: (48..51).collect { |num, i|
			( midiNum: num, groupType: ~groupType,
				style: (row: i % 4, column: i div: 4) )
		}
	)
).printAll; "";
~elems.collect(_.elements).flat.size; // 8


// these expand to three each
~groupType = 'noteOnOffCtl';
~groupType = 'noteOnOffTouch';
~groupType = 'noteOnOffVelTouch';

~elems = MKtlDesc.deepExpand(
	(key: \pad,
		elements: (48..51).collect { |num, i|
			( midiNum: num, groupType: ~groupType,
				style: (row: i % 4, column: i div: 4) )
		}
	)
).printAll; "";
~elems.collect(_.elements).flat.size; // 12

::
