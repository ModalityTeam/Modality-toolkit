
TITLE:: MNamedList
summary:: an ordered list of items which can be accessed by index or name.
categories:: Collections
related:: Classes/Collection, Classes/List, Classes/Dictionary

DESCRIPTION::
note:: NamedList is now in adclib! MNamedList is a copy of NamedList which will stay here for backwards compatibility.::

Like a List, a MNamedList has an array of items which can be accessed by index. Like a dictionary, its items can also be accessed by names. Items can be added and removed and replaced by name. It also supports pseudo-object style like a dict.

Not used yet in Modality.

Note::

MNamedList is designed primarily for semantic clarity, to make storage as text more clearly readable for humans, and to ensure the intended order of iteration.

MNamedList also does quite efficient lookup: code::put, at:: methods are reasonably fast, and direct lookup with code::MNamedList.dict[key]:: or code::MNamedList.array[index]:: is almost as fast as with Array and Event.

code::add, remove, removeAt:: methods are slower than with arrays or dicts, due to the overhead of keeping array, names and dict in sync. This design assumes that lookup will happen several orders of magnitude more often than add/remove.
::

code::
// make a new NamedNist
n = MNamedList([ \a, 4, \b, 5, \c, 6 ]);

//  access list-like by index, get and set
n[0];
n.at([0, 2]); 	// at supports multiple values by index
n[0] = 12;
n.put(2, 13);

//  access dict-like by name, get and set
n[\a];
n.at(\a);
n.at([\b, \c]);	// multiple values
n.at([\a, 2]); 	// can also mix indices and keys

n[\a] = 123;
n.put(\d, 7); 	// new names get added to the end

// access by name as pseudo-method (if n.know == true)
n.a;
n.eee;
n.eee = 555; 	// putting also works by pseudo-method

// internals, can be used for faster lookup
n.dict;
n.array.postcs;
n.names.postcs;

// replaces item if name already there, else does addLast
n.basicAdd (\a, 123)
n.basicAdd (\xyz, 123)

// these all put items in specific places in the order.
n.addFirst(\x, 123);
n.addLast (\zzz, 987);

// add or move a named item relative to given name.
// if the name to add is already in use,
// it is moved to the position indicated.
// if the name where to add is missing,
// addBefore does addFirst, addAfter does addLast.
n.addBefore (\y, 234, \a);
n.addAfter (\y, 23, \a); // this moves \y!

n.do { |val, key, i| [val * 100, key, i].postcs };
n.collect { |val, key, i| val * 100 };

::

CLASSMETHODS::

METHOD:: new, fromPairs
create new MNamedList from array of pairs

code:: n = MNamedList([ \a, 4, \b, 5, \c, 6 ]); ::

METHOD:: fromDict
create new MNamedList from dict and optional ordered names or sortFunc.
code::
n = MNamedList.fromDict((a: 1, b: 3, c: 5), [\c, \a, \b]);
n = MNamedList.fromDict((a: 1, c: 5, b: 3), sortFunc: { |a, b| a > b });
::

METHOD:: newUsing
create new MNamedList from array of values and names
code::
MNamedList.newUsing([1, 3, 5], [\a, \b, \c]);
::

METHOD:: fromAssocs
create new MNamedList from array of associations:
code::
n = MNamedList.fromAssocs([\a -> 1, \b -> 3, \c -> 5]);
::

INSTANCEMETHODS::

METHOD:: names
the ordered list of names

code:: n.names.postcs; ::

METHOD:: dict
the unordered dict of items - for fast access by key

code:: n.dict.postcs; ::

METHOD:: know
flag whether to use pseudomethods or not
code::
n.know;
n.know = false;
::

private:: init, printOn, doesNotUnderstand, storeArgs, dump

METHOD:: at
put by key (name), index or collection of keys/indices
code::
n[0];
n.at(0);
n.at([0, 2]);

//  access dict-like by name, get and set
n[\a];
n.at(\a);
n.at([\b, \c]);	// multiple values
n.at([\a, 2]); 	// can also mix indices and keys
n.a;			// if n.know == true, can access by name as pseudo-method
n.know = true;
n.a;
::

METHOD:: put
put by key (name) or index
code::
n[0] = 11;
n.put(2, 33);
n.put(\a, 111);
n.put(\c, 333);
n[\x] = 999;
n.a = 123; // works if n.know is true
::

Method:: add
add by name; if name exists, replaces item at name, else adds item to end
code:: n.add(\aaa, \xyz); ::

Method:: remove
remove item from dict, array, and remove corresponding name.
code:: n.remove(\xyz); ::

Method:: removeAt
remove item at key, index or list of keys and indices.
code::
n.removeAt(\a);
n;
n.removeAt([\b, \c]);
n;
::

Method:: addBefore, addAfter
add relative to another named item

Method:: addFirst, addLast
add to top or end of list

Method:: replace
replace item at <name> with <item>.

Method:: do, collect
like List.do, collect

private:: basicAdd 