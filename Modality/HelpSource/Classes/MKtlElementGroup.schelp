TITLE:: MKtlElementGroup
summary:: A group of MKtlElements or MKtlElementGroups
categories:: Libraries>Modality
related:: Overviews/Modality, Classes/MAbstractElement, Classes/MKtl

DESCRIPTION::
MKtlElementGroup is used in the hierarchical tree structure of link::Classes/MKtl#elements::. It can do an action when any of the elements it contains is touched. MKtlElementGroup can also be used to make custom groups of MKtlElements and other MKtlElementGroups. The elements are stored in a fixed order, and can be accessed equally via either an index (a number) or a key (a symbol).
See also link::Tutorials/Creating_Named_Groups:: and link::Tutorials/Creating_Custom_Elements_and_Groups::

CLASSMETHODS::

method::new
create a new MKtlElementGroup with a name, a source MKtl, and a list of elements

method::newFrom
create an MKtlElementGroup from a list of elements

method::fromDesc
create an MKtlElementGroup from an element description,
as contained in a desc file.

INSTANCEMETHODS::

METHOD:: elements
gets and sets the code::Array:: of elements contained

METHOD:: dict
gets and sets the code::Event:: containing all elements of the group

METHOD:: elAt
get an element inside the group via a list of indices or keys.

code::
m = MKtl( 'nk2', "*nanokontrol2" ); // create a NanoKONTROL2 MKtl
g = m.elementGroup;

g.elAt( \bt ); // returns the buttons
g.elAt( \bt, 0 ); // returns the first group of buttons
g.elAt( \bt, 0, 4 ); // returns the first group of buttons
g.elAt( 0, \play ); // returns the first group \tr, and the \play button.
::

METHOD:: action
a code::Function:: that is fired when any of the enclosed elements is touched. The first argument of this function is the code::MKtlElement:: that is touched. The arguments that follow are it's enclosing MKtlElementGroups up until code::this::.
code::
m.elementGroup.action = { |...args|
	"group action: ".postln;
	args.do { |el| $\t.post; el.postln };
};
m.elementsDict.choose.doAction;
::

METHOD:: do
Iterate a function for its enclosed MKtlElements and MKtlGroups
code::
m.elementGroup.do { |el| el.postln };
::

METHOD:: doRecursive
Recursively evaluate a function on itself and its linked MKtlElements and MKtlGroups
argument:: function
the function to evaluate.
Its parameters are
list::
## strong::element:: the element
## strong::depth:: current depth within the traversed tree
::

argument:: includeGroups
if code::true::, function gets evaluated also on code::MKtlElementGroup::s.

code::
m.elementGroup.doRecursive { |el, depth| [el.name, depth].postln };
::


METHOD:: asArray

returns:: a nested code::Array:: structure of the enclosed elements. Any enclosed element that is an code::MKtlElementGroup:: will be converted into a normal code::Array::

METHOD:: flat

returns:: a flat code::Array:: of all enclosed MKtlElements.

METHOD:: gui
open a GUI window for code::this::

ARGUMENT:: parent
the parent window (will create one if not specified)

ARGUMENT:: bounds
the desired bounds of the window

returns:: an code::MKtlElementGroupGUI::

Method:: value
get and set the value of all elements in the group (nested if group is nested)
code::
m.gui;
g.value;
g.elAt(\tr).size; // 11 buttons in tr
g.elAt(\tr).value = 11.collect { 2.rand }; // 11 buttons in tr
::
Method:: deviceValue
get and set the deviceValue of all elements in the group

Method:: prevValue, prevDeviceValue
get the previous value or deviceValue of all elements in the group

Method:: valueAction, deviceValueAction
set the value or deviceValue of all elements in the group,
and do the action of the group only (i.e. not of each element contained)

method::isOn
for groups of MIDI [\noteOn, \noteOff], return true if the \on element was activated last.
see link::Tutorials/How_to_create_a_description_file_for_MIDI::

EXAMPLES::

code::
m = MKtl( 'nk2', "*nanokontrol2" ); // create a NanoKONTROL2 MKtl

m.elementGroup; // returns the main MKtlElementGroup of the MKtl

m.elAt( \bt ); // returns the MKtlElementGroup containing the buttons

m.elAt( \bt, 0 ).flat; // creates and returns an Array with the first row of buttons

// make a group of the upper row of buttons
a = MKtlElementGroup( 'group', m, m.elAt( \bt, 0 ).flat );

// assign an action to be fired when any element in the group is touched
// the first argument will be the touched MKtlElement, the second argument
// in this case will be the MKtlElementGroup we just created.
a.action = { |...args| [ args[0].index, args[0].value ].postln; };
::
