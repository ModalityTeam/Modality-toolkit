TITLE:: MPadView
summary:: a view for noteOn/noteOff/touch elements
categories:: GUI
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlElement

DESCRIPTION::
MPadView is used in MKtlGUIs to automatically generate representations of pads and piano keys as commonly used in MIDI devices. You may never need to use MPadView explicitly.

It flexibly supports a variety of behaviors these noteOn, noteOff and touch elements may have, discussed here for clarity, and to possibly add more arcane combinations when encountered.

These types of MIDI elements include:

table::
	## tag: || description: || noteOn: || noteOff: || touch: || comment
	##
	## \noteOnTrig || trigger pad || 127 || - || - ||
	## \noteOnVel || trig pad w/ vel. || 1-127 || - || - ||
	##
	## \noteOnOff || piano key w/ on vel. || 1-127 || 0 || - || default
	## \noteOnOffBut || button on/off || 127 || 0 || - ||
	## \noteOnOffVel || pad/key w/ off vel. || 1-127 || 1-127 || - || rare
	##
	## \noteOnOffTouch || pad/key w/ polytouch || 1-127 || 0 || 0-127 || semi-rare
	## \noteOnOffVelTouch || pad/key w/ off vel and touch || 1-127 || 1-127 || 1-127 || very rare
::

Subsection::Code Examples for demonstration:

code::

// make a little keyboard to try the different modes:
(
~win = Window("PianoLayout", Rect(0, 200, 400, 200)).front;
// switch between modes:
~pop = EZPopUpMenu(~win, Rect(4, 4, 192, 24), "mode",
    MPadView.modeKeys, { |pop|
        pop.item.postln;
        ~keys.do(_.mode_(pop.item));
}, labelWidth: 40);

// sort black before white keys so we draw them on top
~layouts = Piano.layout(48, 72).sort { |a, b| a.color > b.color };

// draw MPadViews as keys
~keys = ~layouts.collect { |ev|
	var color = Color.perform(ev.color);
	var height = ev.h * 60;
	var rect = Rect(ev.x + (1-ev.w/2) * 24 + 4, 30 + 4, 24 * ev.w, height);
	var pad = MPadView(~win, rect);
	pad.baseColor_(color).label_(ev.note);
	pad.vShiftLabel_( ev.h * 15);
    pad.action = { |pd| "pad %    on: % \n".postf(ev.note, pd.value.round(0.001)) };
    pad.upAction = { |pd| "pad %   off: % \n".postf(ev.note, pd.upValue.round(0.001)) };
    pad.moveAction = { |pd| "pad % touch: % \n".postf(ev.note, pd.moveValue.round(0.001)) };
};
)

// make a single MPadView and show its modes / behavior in more detail:

m = MPadView().front;
// set its basic actions for mouseDown, mouseUp and mouseMove
m.action = { |mp| "noteOn vel: %\n".postf(mp.value.round(0.001)) };
m.upAction = { |mp| "noteOff vel: %\n".postf(mp.upValue.round(0.001)) };
m.moveAction = { |mp| "touch value: %\n".postf(mp.moveValue.round(0.001)) };

// -> try its default behavior:
m.mode;
m.label_(m.mode);
// y-pos on pad determines noteOn velocity, noteOff is 0, touch is off
// post its internal settings
[m.useValue, m.useUpValue, m.useMoveValue, m.autoUpTime ];

// noteOn/off button only - turn off useValue
m.mode_(\noteOnOffBut).label_(m.mode);
[m.useValue, m.useUpValue, m.useMoveValue, m.autoUpTime ];

// use noteOn, e.g. for simple trigger pads:
m.mode_(\noteOnTrig).label_(m.mode);
// hold value for m.autoUpTime, then velocity falls by itself
[m.useValue, m.useUpValue, m.useMoveValue, m.autoUpTime ];

// use only noteOn with velocity, e.g. for drum pads:
m.mode_(\noteOnVel).label_(m.mode);
[m.useValue, m.useUpValue, m.useMoveValue, m.autoUpTime ];

// useMouseMove to enable polytouch sensing on key
m.mode_('noteOnOffTouch').label_(m.mode);
[m.useValue, m.useUpValue, m.useMoveValue, m.autoUpTime ];

// noteOff : enable velocity
m.mode_('noteOnOffVel').label_(m.mode);
[m.useValue, m.useUpValue, m.useMoveValue, m.autoUpTime ];

// noteOff : enable velocity
m.mode_('noteOnOffVelTouch').label_(m.mode);
[m.useValue, m.useUpValue, m.useMoveValue, m.autoUpTime ];

// won't switch when nonexistent mode
m.mode_(\noSuchMode);

m.baseColor = Color.grey(0.25);

::

CLASSMETHODS::

METHOD:: new
argument:: parent
argument:: bounds
make a new instance of an MPadView

METHOD:: modes
a dictionary of modes, see top example

METHOD:: modeKeys
names of the available behavior modes

INSTANCEMETHODS::

private:: init, stopTasks

METHOD:: mode
get and set behavior mode of the mpadview. modeName is one of code:: MPadView.modeKeys::.

METHOD:: baseColor
get and set mpadview's background color
METHOD:: hiliteColor
get and set color for activities on view

METHOD:: value, valueAction
get and set current value (and optionally do its action): Clicking on gui sets it to y position within view. Usually used as noteOn velocity.

METHOD:: upValue, upValueAction
get and set current upValue (and optionally do its action): releasing mouseClick on gui sets it to y position within view. Usually used for velocity decay; also for noteOff velocity.

METHOD:: moveValue, moveValueAction
get and set current moveValue (and optionally do its action): moving the held mouse on gui sets it to y position within view. Usually used for polytouch value.

METHOD:: useValue, useUpValue, useMoveValue
get and set booleans whether to use value, upValue, moveValue.
This supports different behavior modes.

METHOD:: action, upAction, moveAction
get and set actions to do when value, upValue, moveValue changes

METHOD:: doAction, doUpAction, doMoveAction
evaluate action, upAction moveAction.

METHOD:: pressed
get and set boolean whether pad is pressed.

METHOD:: autoUpTime
get and set time for automatic upAction after activation.
default inf means it waits for release of mouseclick,
short times (e.g. 0.1) allow trigger pad-like behavior.


METHOD:: label
get and set view label to show
METHOD:: vShiftLabel
shift label by vertical offset
METHOD:: font
get and set font to use for label
