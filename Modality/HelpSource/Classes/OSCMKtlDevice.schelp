TITLE:: OSCMKtlDevice
summary::  The Modality class for creating and accessing OSC controllers
categories:: Libraries>Modality, External Control
related:: Overviews/Modality, Classes/MKtl, Classes/MKtlDevice, Classes/MKtlElement

DESCRIPTION::
OSCMKtlDevice provides an internal interface for OSC devices, interfaces or programs that send data to your computer via OSC.

Note:: Usually, you never access the OSCMKtlDevice itself, as the MKtl that contains it (its parent MKtl) is the main code interface.::

When creating an MKtl by desc name, e.g. code::MKtl(\x, "*drive");::, a new OSCMKtlDevice  using that description is created. Because actual network ports and addresses may differ from the description file, some adapting may be needed, see link::Tutorials/Connecting_OSC_devices::

For most devices or interfaces, this requires that someone has already made a description file for the device; if there is none, it is easy to make one following the instructions here:
link::Tutorials/How_to_create_a_description_file:: and here: link::Tutorials/How_to_create_a_description_file_for_OSC::

More general info can be found in link::Classes/MKtl:: and link::Classes/MKtlDevice:: .


CLASSMETHODS::

private:: initialized, sourceDeviceDict, deinitDevices

METHOD:: find
Find all currently opened OSC devices.

argument:: post
Whether or not to post about the OSC devices.

METHOD:: postPossible
Post all access code for device that could be used by name.

METHOD:: protocol
protocol name, \osc.


METHOD:: initDevices
Initialize the sourceDeviceDict and look for available OSC devices.

argument:: force
Whether or not to do this again if it was already done before.


METHOD:: new

Creates a new instance of OSCMKtlDevice.

argument:: name
The short name of the controller as it shows up in the list of found devices.

argument:: devInfo
The device code::idInfo:: to use to make the OSC connections.

argument:: parentMKtl
The instance of link::Classes/MKtl:: that this MKtlDevice will belong to.

argument:: multiIndex
if multiple instances are present, indicate which one. (not really used with OSC, mainly for method compatibility with other variants of MKtlDevices.


INSTANCEMETHODS::

private:: initOSCMKtl

METHOD:: initElements
Initilize all elements and set OSCFuncs for them

METHOD:: initCollectives
Initilize all collectives and set OSCFuncs for them

METHOD:: oscFuncDictionary
A Dictionary containing all the OSCFuncs that this device is using.

METHOD:: closeDevice
Free all OSCFuncs.

METHOD:: cleanupElementsAndCollectives
De-initialize all elements and collectives.


METHOD:: send
Send the value of the element or collective to the OSC device; called if you set the value of an MKtlElement that is an output.

argument:: key
The key of the element or collective.

argument:: val
The value to which it is set. A collective should send an Array.


METHOD:: source
The link::Classes/NetAddr:: device that is the source for this OSCMKtlDevice.

returns:: an instance of link::Classes/NetAddr::

METHOD:: destination
The link::Classes/NetAddr:: device that is the destination for this OSCMKtlDevice.

returns:: an instance of link::Classes/NetAddr::

METHOD:: recvPort
The port to which the OSC device/interface is sending data to. If this is configurable in the OSC device or interface, then it is easier to use sclang's default port of 57120 and leave it undefined.

METHOD:: updateSrcAddr
Updates the device that is the source for this OSCMKtlDevice and reconfigures OSC communications.
ARGUMENT:: hostname
The hostname or IP address of the source
ARGUMENT:: port
The port of the source

METHOD:: updateDstAddr
Updates the device that is the destination for this OSCMKtlDevice and reconfigures OSC communications.
ARGUMENT:: hostname
The hostname or IP address of the destination
ARGUMENT:: port
The port of the destination

METHOD:: updateSrcDstAddr
Updates the device that is both the source and destination for this OSCMKtlDevice and reconfigures OSC communications. Use this method if the source and destination lies in the same program on the same machine.
ARGUMENT:: hostname
The hostname or IP address of the source/destination
ARGUMENT:: port
The port of the source/destination
