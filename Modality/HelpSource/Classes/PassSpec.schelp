TITLE:: PassSpec
summary:: pass thru value and deviceValue
categories:: Control
related:: Classes/Spec, Classes/ControlSpec

DESCRIPTION::
Some control values (strings, symbols, maybe others) should simply be passed thru, rather than converting them with map/nmap functions. PassSpec does just that, so deviceValue and value are always just passed thru as is.

First code examples:

code::
PassSpec.new; // returns PassSpec class, because
PassSpec.map(23);   // values are unchanged
PassSpec.unmap(\skidoo); // in both directions
PassSpec.asSpec; // returns PassSpec class
PassSpec.default; // always returns nil
::

CLASSMETHODS::

METHOD:: new
returns PassSpec class, because when map and unmap are always the same,
there is no need to create instances.

METHOD:: asSpec
returns PassSpec class

METHOD:: map, unmap
argument:: inval
returns inval

METHOD:: default
returns nil, because there is no meaningful default value for a neutral
non-mapping spec class.

EXAMPLES::
code::
// a description desc for a device with a single,
// non-numeric element:
(
d = (
	deviceName: "testa",
	protocol: \osc,
	idInfo: "testa",
	netAddrInfo: ( ipAddress: "169.254.1.1", srcPort: 9000, recvPort: 8000 ),

	elementsDesc: (
		shared: ( ioType: \in, spec: PassSpec, \type: \unknown),
		elements: [( key: 'device',  oscPath: "/serialosc/device" )]
	)
);
// make an MKtl from it
MKtl(\x).free;
MKtl(\x, d);
// look at the element
MKtl(\x).elAt(\device).dump;
)

// tests: setting and and getting non-number value works with PassSpec
MKtl(\x).elAt(\device).elemDesc.deviceSpec; // the class PassSpec

MKtl(\x).elAt(\device).value = "foo"; // string remains unchanged
MKtl(\x).elAt(\device).value.cs;
MKtl(\x).elAt(\device).deviceValue.cs;

MKtl(\x).elAt(\device).deviceValue = \oof; // symbol too
MKtl(\x).elAt(\device).value.cs
MKtl(\x).elAt(\device).deviceValue.cs

// TODO: add an MKtlElementGUI that supports non-number elements;
// currently they are not supported, so this line fails:
MKtl(\x).gui;
::