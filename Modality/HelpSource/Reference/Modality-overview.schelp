title:: Modality Lib
summary:: Interfacing with the outside world made easy.
categories::Modality, External Control

Section:: Introduction

Modality is a toolkit created by a loose collaboration between both developers and (advanced) users of SuperCollider (also called Modality, see below).

One of its basic ideas is to simplify the creation of your very personal instruments with SuperCollider, using controllers of many different kinds. To this end, a common code interface, MKtl, is used for connecting  controllers from different sources (and protocols) like HID and MIDI, Serial, OSC, GUI, etc.

A second starting point is that the same physical interfaces (sets of sliders, buttons, motion sensors etc etc) can be used for many different purposes, and a highly modal approach to mapping and on-the-fly remapping can help to make a setup much more flexible, powerful, and interesting to play. For example, when improvising with acoustic musicians, highly modal interfaces allow much faster changes of overall direction.

http://modality.bek.no/

The Modality project was initiated by Jeff Carey and Bjoernar Habbestad, and collaborators so far have included: Marije Baalman, Alberto de Campo, Wouter Snoei, Till Bovermann, Miguel Negrao, Robert van Heumen, and Hannes Hoelzl.


Acknowledgements:
Modality and its research meetings have kindly been supported by BEK in Bergen, Norway, and STEIM, Amsterdam.

SECTION:: Overview

Each MKtl has 'elements' (i.e. a slider, a knob, etc).

code::
MIDIMKtl.find

//create a non existing Controller according to template 'BCR2000'

k = MIDIMKtl.make('fakeBCR','BCR2000');
k.elements //Dictionary of controls keys to MKtlElements
::

For a real BCR2000 we would use:
code::
k = MIDIMKtl('bcr20000').elements
::

Each element has a key:
code::
k.elements.at(\kn_7_1)
::
or using a shortcut:
code::
k.at(\kn_7_1)
::

You can get multiple elements using arrays:
code::
k.at([\kn_7_1,\kn_7_2]);
::
And you can use arrays instead of symbols
code::
k.at([[\kn,7,1],[\kn,7,2]]);
::
or
code::
k.at((1..8).collect{ |i| [\kn,7,i] });
::

Elements have a type:
code::
k.at(\kn_7_1).type
::

It's possible to select elements by their type:
code::
k.elements.asArray.select{ |x| x.type == \encoder }
::

Each element contains an link::Classes/FPSignal:: :

code::
MIDIMKtl('bcr20000').at(\kn_1_1).signal

or

MIDIMKtl('bcr20000').signalFor(\kn_1_1)
::

You can get the corresponding link::Classes/EventSource:: :


code::
MIDIMKtl('bcr20000').at(\kn_1_1).eventSource
::
which is the same as
code::
MIDIMKtl('bcr20000').at(\kn_1_1).signal.changes
::
or
code::
MIDIMKtl('bcr20000').esFor(\kn_1_1)
::
Get multiple Signals:
code::
MIDIMKtl('bcr20000').signalFor( (1..8).collect{ |i| [\kn,7,i] });
::

Connect an action the each slider
code::
(
k = MIDIMKtl('bcr20000');
//first remove all actions from the controller.
k.reset;
k.signalFor( (1..8).collect{ |i| [\kn,7,i] })
	.do{ |sig,i|
		sig.do{ |v| postln("Got something from knob "++(i+1)++" : "++v) }
	}
)
::

A simple example of controling the frequency of synth with a knob:

code::
//Connecting a synth to knob

(
k = MIDIMKtl('bcr20000'); //change to your own controller
k.reset; //reset controller to a clean state
~knob = k.esFor(\kn_7_1); //change to your own controller

//start synth
~synth = { |freq=400| LFNoise0.ar(freq)*0.2 }.play;

//associate each result EventSource with a synth
~knob.do{ |v| ~synth.set(\freq, v.linlin(0.0,1.0,100.0,4000.0) ) };
)
::


