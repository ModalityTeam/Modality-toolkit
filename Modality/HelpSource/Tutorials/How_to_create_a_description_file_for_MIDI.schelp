title:: How to create a description file for a MIDI device
summary:: How to create a description file to use with the Modality toolkit for a MIDI device
categories:: Libraries>Modality
related:: Overviews/Modality, Classes/MKtl, Reference/MKtl_description_files, Classes/MIDIExplorer, Classes/HIDExplorer, Tutorials/How_to_create_a_description_file


MIDIClient.init;

Section:: Introduction

The functionality of link::Classes/MKtl:: relies on descriptions of the  devices to be used. For many controllers, there are already descriptions available, but your preferred device may not be among them.

This tutorial first shows simple examples of MIDI interfaces, by emulating them within SuperCollider, and then describes how to create a description file for your interface.


list::
##link::#Simple input::
##link::#Simple output::
##link::#Explore a MIDI device::
##link::#Write a description file for the explored MIDI device::
##link::#MIDI output::
##link::#MIDI device info::
##link::#MIDI Initialisation messages::
::

section:: Simple input

In this section we will go through the different types of MIDI messages for communicating element states EMPHASIS::from a MIDI-device to SuperCollider:: and show how to write a description for them.

There are a number of different types of MIDI messages:

list::
## noteOn and noteOff for midi note messages â€” typically from a MIDI keyboard,
## pitch bend messages,
## after touch messages,
## MIDI control messages ("CC" e.g., volume control) and
## MIDI program change messages (e.g. to switch to a different bank of sounds).
## 14 bit MIDI control messages
::

To try out the examples below even without a physical device at hand, we will use SuperColliders own MIDI input and output.

NOTE::
Depending on your operating system, you might need to set up a helper tool for MIDI loopback.

list::
##On linux, midi ins and outs are created automatically.
##For OSX, you have to create an IAC Bus in the system tool "Audio MIDI Setup".
##For other platforms, please refer to a search engine of your choice.
::
::

Find all MIDI devices and do the MIDI initialisation (implicitely within the MKtl implementation):

code::
MKtl.find(\midi);
::

On OSX, this should now show something like this in the post window:

code::
MIDI Sources:
	MIDIEndPoint("IAC Driver", "IAC Bus 1", -476939297)
MIDI Destinations:
	MIDIEndPoint("IAC Driver", "IAC Bus 1", -1608967985)

-----------------------------------------------------

/*** Possible MKtls for MIDI devices: ***/
	// [ midi device, portname, uid]

// [ [ "IAC Driver", "IAC Bus 1", -476939297 ] ]
	// Unknown - Create from lookupName and explore :
MKtl('midi_0_iac_dr', 'midi_0_iac_driver');


-----------------------------------------------------
-> MKtl
::

The following code creates a (virtual) MIDI loopback connection between code::~midiOut:: and code::~midiIn:: and stores information on your setup in code::~idInfo:::

code::
(
MKtl.find(\midi);

// make a MIDIOut for the tests in the examples
Platform.case(
	\linux, {
		~midiOut= MIDIOut(0); // = SC's first midi output
		~midiOut.connect(1); // = connect to SC's first midi input
	},
	\osx, {
		// take the first endpoint in MIDIClient.destinations
		~midiOut = MIDIOut(0);
	}
	/*,
	\windows, {
		// please let us know what this should be!
	}
	*/
);

// and create proper idInfo for your platform
~idInfo = Platform.case(
	\linux, ( name: "SuperCollider", srcPortIndex: 0 ),
	\osx, "IAC Driver",
	\windows, "no idea, please tell us what this should be!"
).postcs;

);
::

NOTE::
For more information on MIDIOut see:
list::
##link::Classes/MIDIOut#Linux specific: Connecting and disconnecting ports::
##link::Classes/MIDIOut#OS X specific: Sending MIDI to other applications::
::
::

subsection:: MIDI note messages

MIDI note messages were originally designed for piano keys on a MIDI keyboard. However, in many MIDI controllers they are used to report on states of elements like buttons or drum pads.

MIDI code::noteOn:: messages have a EMPHASIS::note number:: defining which key was pressed, and a EMPHASIS::velocity:: value defining the speed or intensity with which it was pressed. A typical mapping for velocity would be the amplitude of a sound such that it gets louder with the amount of energy applied to press the corresponding key.

When the key is lifted again (i.e. the note is released), a code::noteOff:: message is sent. It again features a note number and a velocity value. By interpreting this velocity as the release speed, a resonable mapping would be stretching the release time of sound's envelope). Instead of a code::noteOff::, many MIDI devices send a code::noteOn:: message with velocity code::0::, which is officially supported, and many MIDI toolkits translate this into a noteOff 0 message.

SuperCollider allows turning this translation on and off if desired
code::
MIDIIn.noteOnZeroAsNoteOff = false; // send noteOn with velocity 0 as noteOn 0
MIDIIn.noteOnZeroAsNoteOff = true; // send noteOn with velocity 0 as noteOff 0
::
For details, see link::https://github.com/supercollider/supercollider/issues/1483:: and link::https://github.com/supercollider/supercollider/pull/1488::

As a first example, we now create an link::Classes/MKtl:: containing exactly one link::Classes/MKtlElement:: that responds to a code::noteOn:: event. For mapping its velocity we use the code::spec: \midiVel:: identifier, which tells the system to normalise the raw value range of velocity values (code::0:: to code::127::) to values between code::0:: and code::1::.

code::
// midiMsgType: \noteOn, one note
(
~descInput = (
	idInfo: ~idInfo,
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: \pkey,
				type: 'pianoKey',
				midiMsgType: \noteOn,
				midiChan: 0,
				midiNum: 64, // note number
				spec: \midiVel,
				ioType: \in
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // later, one can update it
m.gui;
m.trace;
m.free;

// send some messages from MIDIOut,
// which come back in as if from an external device:
~midiOut.noteOn(0, 64, 127 );
~midiOut.noteOn(0, 64, 24 );
// this may not post anything - see note about noteOn and velocity zero
~midiOut.noteOn(0, 64, 0 );
::


As a second example, we show how to make an element that responds to a code::noteOff:: message:

code::
// midiMsgType: \noteOff,
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: \pkey,
				type: 'pianoKey',
				midiMsgType: \noteOff,
				midiChan: 0,
				midiNum: 64, // note number
				spec: \midiVel,
				ioType: \in
			)
		]
	)
)
);
m.free;  // free m and make it new:
m = MKtl( \testMIDI, ~descInput );
// or rebuild it from the new description:
m.rebuild( ~descInput );
m.trace;
m.gui;
// make some messages:
~midiOut.noteOff(0, 64, 127 );
~midiOut.noteOff(0, 64, 24 );
~midiOut.noteOff(0, 64, 0 );
~midiOut.noteOn(0, 64, 0 ); // also becomes noteOff in OSX
::

To get noteOn and noteOff actions separately, one can make separate elements, and here one can declare shared properties for both elements with full flexibility, like this:

code::
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: \bt,
				shared: (
					type: 'button',
					midiChan: 0,
					midiNum: 64,
					spec: \midiBut,
					ioType: \in
				),
				elements: [
					( key: \on, midiMsgType: \noteOn ),
					( key: \off, midiMsgType: \noteOff )
				]
			)
		]
	)
)
);
m.free;  // free m and make it new:
m = MKtl( \testMIDI, ~descInput );
m.trace; m.gui;
// make some messages:
~midiOut.noteOn(0, 64, 127 );
~midiOut.noteOff(0, 64, 127 );
~midiOut.noteOff(0, 64, 24 );
~midiOut.noteOff(0, 64, 0 );
~midiOut.noteOn(0, 64, 0 ); // also becomes noteOff in OSX
::


The code:: \groupType :: key allows concisely defining the following combinations of noteOn, noteOff and touch by a single name, and building them correctly:

table::
	## tag: || description: || noteOn: || noteOff: || touch: || comment
	##
	## \noteOnTrig || trigger pad || 127 || - || - ||
	## \noteOnVel || trig pad w/ vel. || 1-127 || - || - ||
	##
	## \noteOnOff || piano key w/ on vel. || 1-127 || 0 || - || default
	## \noteOnOffBut || button on/off || 127 || 0 || - ||
	## \noteOnOffVel || pad/key w/ off vel. || 1-127 || 1-127 || - || rare
	##
	## \noteOnOffTouch || pad/key w/ polytouch || 1-127 || 0 || 0-127 || semi-rare
	## \noteOnOffVelTouch || pad/key w/ off vel and touch || 1-127 || 1-127 || 1-127 || very rare
::

See link::Tutorials/Using_groupType_in_MKtlDescs:: for a full discussion.
As a first example, here is how to make a

code::
// make noteOnOff + touch control with groupType \noteOnOffTouch
(
d = (
	deviceName: "test", protocol: 'midi',
	idInfo: "bogus", filename: "test4onoffs",
elementsDesc: (
		shared: (elementType: \pad, midiChan: 0, groupType: \noteOnOffTouch),
		elements: // [];
		(48..51).collect { |midiNum, i|
			( midiNum: midiNum,
				style: (row: 0, column: i, width: 1, height: 1)
			)
		}
	)
);
x = MKtlDesc.fromDict(d);
x.elementsDict.size.postln; // 12
m = MKtl(\test, x);
m.postElements;
g = m.gui;
)

// This makes it easy to set separate actions for on and off:
m.elAt(\1, \on).action = { "ON".postln };
m.elAt(\1, \touch).action = { "mooove".postln };
m.elAt(\1, \off).action = { "OFFFFF".postln };

// open as if on external MIDI plug
// - on macOS, requires IAC driver,
// - on lin/win, use appropriate MIDI port
m.openDeviceVia("IAC Driver");
~midiOut = MIDIOut(0);
~midiOut.noteOn(0, 48, 37 );
~midiOut.polyTouch(0, 48, 73 );
~midiOut.noteOff(0, 48, 37 );

// With this approach, there is no single element to ask whether the button is on or off. You can use the 'isOn' method on the group to check whether on or off was last activated :
m.elAt(\1).isOn;

::


subsection:: MIDI control messages

MIDI control messages are typically sent out by knobs, sliders or pedals on a device, but in some cases also buttons or built-in sensors.

code::
// midiMsgType: \cc - knob
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'kn',
				type: 'knob',
				midiMsgType: \cc,
				midiChan: 0,
				midiNum: 8, // control number
				spec: \midiCC,
				ioType: \in
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // updating it

m.trace;
m.gui;
// make some messages:
~midiOut.control(0, 8, 127 );
~midiOut.control(0, 8, 24 );
~midiOut.control(0, 8, 0 );
::

code::
// midiMsgType: \cc - button
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'bt',
				type: 'button',
				midiMsgType: \cc,
				midiChan: 0,
				midiNum: 8, // control number
				spec: \midiBut,
				ioType: \in
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // updating it
m.gui;
m.trace;

// make some messages:
~midiOut.control(0, 8, 127 );
~midiOut.control(0, 8, 0 );
::

subsection:: 14 bit MIDI control messages

Modality has support for 14 bit MIDI. 

14 bit midi is achieved by combining two midi CC's into one. They are offset by 32 steps in their cc numbers which means that a sending device may send the first part of it on midi cc 16, and then the rest at midi cc 48.

In Modality, you only need to specify the first "lower" midi cc channel and then Modality will handle the rest of it for you. To use this functionality, specify the midiMsgType key in your description as \cc14 and optionally your spec as \midiCC14 like so:

code::
(
~descInput = (
    idInfo: ~idInfo, // still around from above
    protocol: \midi,
    elementsDesc: (
        elements: [
            (
                key: 'kn',
                type: 'knob',
                midiMsgType: \cc14, // 14 bit
                midiChan: 0,
                midiNum: 8, // The lower / first part of the 14 bit midi signal. The other is assumed to be offset 32 from this, so 40 in this case. 
                spec: \midiCC14, // 14 bit
                ioType: \in
            )
        ]
    )
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // updating it

m.trace;
m.gui;
::
subsection:: MIDI pitch bend messages


MIDI pitch bend messages are sent out by MIDI keyboards - usually a control in the shape of a wheel that flips back to its center position left of the keyboard.
On some of the mini keyboards that you can find, the pitch bend message is implemented via buttons on the device in the same location.

code::
// midiMsgType: \bend,
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'bend',
				type: 'bender',
				midiMsgType: \bend, // bend needs midiChan only
				midiChan: 0,
				spec: \midiBend,
				ioType: \in
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // updating it
m.trace;

// make some messages:
~midiOut.bend(0, 128*128-1 ); // 14-bit value
~midiOut.bend(0, 128*64 );
~midiOut.bend(0, 0 );
::

subsection:: MIDI aftertouch messages


Aftertouch is the pressure that is on a piano key after the initial pressing (which is translated to note velocity as explained above). The MIDI protocol implements aftertouch in two ways:

Basic Aftertouch, also called channel pressure, has a single aftertouch value per midi channel, which is usually applied to all notes playing on that channel. Tis is the more common touch implementation in hardware controllers. In SC, this is called code::\touch::.

PolyTouch, or polyphonic aftertouch,  allows an individual aftertouch value for every currently playing note. In SC, this is called code::\polyTouch::.

code::
// midiMsgType: \polyTouch,
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'polyTouch',
				type: 'polyTouch',
				midiMsgType: \polyTouch,
				midiChan: 0,
				midiNum: 2, // polyTouch has a note number it applies to
				spec: \midiTouch,
				ioType: \in
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // updating it
m.trace;

// make some messages:
~midiOut.polyTouch(0, 2, 127 );
~midiOut.polyTouch( 0, 2, 63 );
~midiOut.polyTouch(0, 2, 0 );
::

code::
// midiMsgType: \touch,
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'touch',
				type: 'touch',
				midiMsgType: \touch,
				// touch only has \midiChan, no \midiNum
				midiChan: 0,
				spec: \midiTouch,
				ioType: \in
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // updating it
m.trace;

// make some messages:
~midiOut.touch(0, 127 );
~midiOut.touch(0, 63 );
~midiOut.touch(0, 0 );
::

subsection:: MIDI program change messages

MIDI program change messages are typically sent when a device is changing the patch that is played on the synthesizer. They can be implemented by buttons, or knobs.

code::
// midiMsgType: \program,
(
~descInput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'prog',
				type: 'knob',
				midiMsgType: \program, // program does not need \midiNum
				midiChan: 0,
				spec: \midiProgram,
				ioType: \in
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descInput );
m.rebuild( ~descInput ); // updating it
m.trace;

// make some messages:
~midiOut.program(0, 127 );
~midiOut.program(0, 63 );
~midiOut.program(0, 0 );
::


section:: Simple output

In this section we will go through all the different types of MIDI messages that may be sent out and show how to write a description for that element.

Typical use of MIDI output on controllers would be controlling the LEDs on the device that indicate the current mode of the instrument that you are building, or telling motorized faders the values/positions they should move to.

But you could also create an MKtl that connects to a hardware synthesizer - or another software program, and use the Modality toolkit to send the control messages to it.

Which MIDI messages a controller reacts to can be found out from the controller's manual. Alternatively, you could just send it a bunch of different messages and see what happens. Apart from system exclusive messages, this should be safe to do - system exclusive messages can be used for uploading new firmware or changing firmware mode, so don't just experiment with that, without properly informing yourself first.

subsection:: MIDI note messages


code::
// midiMsgType: \noteOn
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'bt',
				type: 'button',
				midiMsgType: \noteOn,
				midiChan: 0,
				midiNum: 2,
				spec: \midiVel,
				ioType: \inout
			)
		]
	)
)
);

m.device.midiOut.dump
m.device.destination

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

// turn on tracing of midi input, so we see incoming messages
MIDIFunc.trace

m.elAt( \bt ).value_( 0 ); // see note above on noteOn message with velocity zero; may show up in the trace as a noteOff
m.elAt( \bt ).value_( 1 );

m.gui; // and press the button for it
::


code::
// midiMsgType: \noteOff
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'bt',
				type: 'button',
				midiMsgType: \noteOff,
				midiChan: 0,
				midiNum: 2,
				spec: \midiVel,
				ioType: \out
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

m.elAt( \bt ).value_( 0 );
m.elAt( \bt ).value_( 1 );

m.gui; // and press the button
::

subsection:: MIDI control messages

code::
// midiMsgType: \cc - slider
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'sl',
				type: 'slider',
				midiMsgType: \cc,
				midiChan: 0,
				midiNum: 2,
				spec: \midiCC,
				ioType: \out
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

m.elAt( \sl ).value_( 0 );
m.elAt( \sl ).value_( 0.4 );
m.elAt( \sl ).value_( 1 );

m.gui; // and move the slider
::

code::
// midiMsgType: \cc - button
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'bt',

				type: 'button',
				midiMsgType: \cc,
				midiChan: 0,
				midiNum: 2,
				spec: \midiBut,
				ioType: \out
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

m.elAt( \bt ).value_( 0 );
m.elAt( \bt ).value_( 1 );

m.gui; // and press the button
::


subsection:: MIDI pitch bend messages

code::
// midiMsgType: \bend
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'bend',
				type: 'slider',
				midiMsgType: \bend, // bend has no midiNum
				midiChan: 0,
				spec: \midiBend,
				ioType: \out
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

m.elAt( \bend ).value_( 0 );
m.elAt( \bend ).value_( 0.4 );
m.elAt( \bend ).value_( 1 );
m.elAt( \bend ).value_( 0.5 ); // default
::

subsection:: MIDI Aftertouch messages

code::
// midiMsgType: \polyTouch
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'touch',
				type: 'slider',
				midiMsgType: \polyTouch,
				midiChan: 0,
				midiNum: 2,
				spec: \midiTouch,
				ioType: \out
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

m.elAt( \touch ).value_( 0 );
m.elAt( \touch ).value_( 0.4 );
m.elAt( \touch ).value_( 1 );
::

code::
// midiMsgType: \touch
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'touch',
				type: 'slider',
				midiMsgType: \touch, // touch does not need \midiNum
				midiChan: 0,
				spec: \midiTouch,
				ioType: \out
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

m.elAt( \touch ).value_( 0 );
m.elAt( \touch ).value_( 0.4 );
m.elAt( \touch ).value_( 1 );
::

subsection:: MIDI program change messages


code::
// midiMsgType: \program,
MIDIIn.connectAll; MIDIFunc.trace;
(
~descOutput = (
	idInfo: ~idInfo, // still around from above
	protocol: \midi,
	elementsDesc: (
		elements: [
			(
				key: 'prog',
				type: 'slider',
				midiMsgType: \program, // program does not need \midiNum
				midiChan: 0,
				spec: \midiProgram,
				ioType: \out
			)
		]
	)
)
);

m = MKtl( \testMIDI, ~descOutput );
m.rebuild( ~descOutput ); // updating it

m.elAt( \prog ).deviceValue_( 0 );
m.elAt( \prog ).deviceValue_( 64 );
m.elAt( \prog ).deviceValue_( 127 );
::

subsection:: MIDI system exclusive messages

note:: To be documented when fully implemented and tested.::



section:: Explore a MIDI device

Note:: This will be updated when the MIDIMonitor class is finished. ::

First, find your device in the list posted by the following code and assign the MKtl to a variable.
code::
MKtl.find(\midi);

// copy and change 'midi_0_iac_dr' to a good shortname, e.g.
a = MKtl('iac', 'midi_0_iac_driver');

// ... this will post some warnings:
MKtl( 'iac' ) - desc not valid: nil.
MKtl:finishInit: no desc given, cannot create elements...
WARNING: MKtl('iac') .elementsDict has no elements:
 nil

//// and then explanation and working code:
// MKtl('iac') : opened device without desc file.
// Maybe you want to explore this device?
MKtl('iac').explore;

::

Now, turn on the explore mode and move every element on your controller. Make sure to go through all of them and move them in all their degrees of freedom.

code::
// MIDI: if you want more information on what is happening, turn on verbose mode:

MKtl('iac').explore;

MIDIExplorer.verbose = true;
MIDIExplorer.verbose = false; // turn it off again
::

When done, create a raw description file which you will edit and review in the next step.

code::
a.createDescriptionFile;
// and stop the exploring:
a.explore( false );
::

note::If this does not work for you, try: code::MIDIExplorer.compile:: and copy the code from the post window manually to a new file.::


section:: Turning exploration data into a desc file

We now have a file that contains all the raw data we need for the description file, and that already works as a full desc file. However, it is worth spending time on editing it for for semantic clarity, by better element names, and good grouping.

Detailed background info sources:
list::
##For desc file format conventions, see link::Reference/MKtl_description_files::.
##For naming conventions, see link::Reference/MKtl_description_files#Naming Conventions::.
::

Steps for editing desc files:
list::
## Grouping first - put elements in groups with good names.
E.g. a bank of 8 sliders should be in a group called \sl; knobs would be in \kn; labeled elements, e.g. buttons \play, \stop, \rew, \fwd should be in a transport group, short \tr, etc.
## Lift shared info up as far as possible. If all elements only use midichannel 0, put that in the top shared entry; if all elements in a group are sliders, put their elementType in the shared dict of that group.
## Adapt the elementTypes for the elements of the device - put in the most appropriate ones you can find in MKtlElement.types.
::

We go thru the process step by step with raw data that may have come from the code::MKtl().explore:: as mentioned above.
It contains information of a device with three knobs:

code::
...
elements: [
	// ------ cc -------------
	(key: '_elName_0_002_', 'midiMsgType': 'cc', 'elementType': 'slider', 'midiChan': 0, 'midiNum':  2, 'spec': 'midiCC'),
	(key: '_elName_0_003_', 'midiMsgType': 'cc', 'elementType': 'slider', 'midiChan': 0, 'midiNum':  3, 'spec': 'midiCC'),
	(key: '_elName_0_004_', 'midiMsgType': 'cc', 'elementType': 'slider', 'midiChan': 0, 'midiNum':  4, 'spec': 'midiCC')
],
...
::

NOTE::Although the type should be code::\knob::, it registers as code::\slider::. This is because only a cc value is coming in, and it does not state what kind of hardware element is producing it.
::

Edit the raw elements by giving them better names (assuming buttons are labeled A, B, C);
and put them in a named group:

code::
// ...
elements: [
	(
		key: \kn,
		elements: [
			(key: \A, 'midiMsgType': 'cc', 'elementType': 'knob', 'midiChan': 0, 'midiNum':  2, 'spec': 'midiCC'),
			(key: \B, 'midiMsgType': 'cc', 'elementType': 'knob', 'midiChan': 0, 'midiNum':  3, 'spec': 'midiCC'),
			(key: \C, 'midiMsgType': 'cc', 'elementType': 'knob', 'midiChan': 0, 'midiNum':  4, 'spec': 'midiCC')
		]
	)
]
// ...

// highly recommended: lift all shared properties up to group,
// so that only the different properties remain in each element:
// ...
elements: [
	(
		key: \kn,
		shared: ('midiMsgType': 'cc', 'elementType': 'slider', 'midiChan': 0, 'spec': 'midiCC'),
		elements: [
			(key: \A, 'midiNum': 2),
			(key: \B, 'midiNum': 3),
			(key: \C, 'midiNum': 4)
		]
	)
]
// ...

::

In case there are two columns of 3 knobs each, the flat list of 6 knobs would become
a hierarchical structure like this:

code::
(
// ...
elements: [
	(
		key: \sl,
		shared: ('midiMsgType': 'cc', 'elementType': 'slider', 'midiChan': 0, 'spec': 'midiCC'),
		elements: [
			(
				key: \L,
				elements: [
					(key: \A, 'midiNum': 2),
					(key: \B, 'midiNum': 3),
					(key: \C, 'midiNum': 4)
				],
			),
			(
				key: \R,
				elements: [
					(key: \A, 'midiNum': 2),
					(key: \B, 'midiNum': 3),
					(key: \C, 'midiNum': 4)
				],
			),
		]
	)
]
// ...
)
::

note::
Description files can also be written and tested without an actual device being attached. As long as you keep the naming conventions in mind you will be able to create a working GUI version.
::

note::
A proper description on how to combine code::\noteOn, \noteOff, \polyTouch:: is still missing in this tutorial. Several existing desc files do that already, e.g. see:
code::
MKtlDesc("*beatstep").openFile;
::
::


note::
When exploring a MIDI device only the incoming MIDI is analysed - MIDI devices do not report any info on which messages they will respond to, so one has to add MIDI output elements manually. This is usually documented in the implementation chart in the device manual (which is usually findable online).
::

subsection:: Save description file and test it

If you are happy with the generated document, save it with a meaningful name to the user  folder for descriptions, which is here:
code::
MKtlDesc.userFolder.openOS;
::
The filename should be "<company-devicename-extra-info>", and must end in code::".desc.scd"::.
After adding a new desc file, please do
code::
MKtlDesc.writeCache;
::

You are highly welcome to contribute your desc files to modality!
Especially when they are generally useful (i.e. not for a selfmade or customized device
that only you have), you can save it to the defaultFolder, and submit a pull request at github, or mail it to the modality list.
code::
MKtlDesc.defaultFolder.openOS;
::

To test your new description file, restart SuperCollider and follow instructions in link::Tutorials/ModalityTutorial::.

/// ... To be updated using the MIDIMonitor class when finished ... ///



section:: MIDI device info

In the simple case, your MIDI device creates a single MIDI source port, by which it sends MIDI to the computer, and optionally a MIDI destination port by which you can send MIDI messages to it. In this case you only need to define the name of the MIDI device, as it shows up when you do code::MKtl.find::.
code::
( idInfo: "Ableton Push" )
::

If several devices of the same kind are connected, MKtl.find(\midi) will propose all of them as possible MKtls to choose, e.g. two nanoKontrol2s:

code::
MKtl.find(\midi);
//  post:
// Available MIDIMKtls:
// MKtl(name, filename);
		// *[ midi device, portname, uid]

MKtl('midi_0_iac_driver', 'midi_0_iac_driver');
		// [ "IAC Driver", "IAC Bus 1", -476939297 ]
MKtl('midi_1_nanokontrol2_nr_1', 'midi_1_nanokontrol2_nr_1');
		// [ "nanoKONTROL2", "SLIDER/KNOB", 1111689538 ]
MKtl('midi_2_nanokontrol2_nr_2', 'midi_2_nanokontrol2_nr_2');
		// [ "nanoKONTROL2", "SLIDER/KNOB", 2129951315 ]
::


Some MIDI devices use multiple MIDI ports, and MKtl treats these as separate devices for which you can make independent MKtls. E.g. the Steinberg CMC-PD or the QuNexus do this. For such devices, you can make separate descriptions for each port number, and you specify the port number in the description:
You then make a Dictionary of the code::idInfo:: with the field code::name:: with the name of the device (as it shows up after code::MKtl.find::), and then define the code::srcPortIndex:: and/or the code::destPortIndex::; if either one is not specified, it takes the first one.

code::
// Steinberg CMC-PD or the QuNexus have 3 ports each,
// and their desc files know about them.
MKtlDesc.openFolder;
MKtlDesc.loadDescs("*qunexus*").do(_.openFile);
MKtlDesc.loadDescs("*cmc-pd*").do(_.openFile);
MKtlLookup.all.keys;

(
deviceName: "QuNexus",
...
)
// source/dest port numbers, you write:
(
idInfo: (
	deviceName: "QuNexus",
	srcPortIndex: 0,
	destPortIndex: 0
),
...
)

::


section:: MIDI special messages

Some MIDI devices can be configured to special modes, eo one can e.g. set their LEDs to specific values, or generally, activate everything one wants to use. This is done by sending special messages (usually long and cryptic sysex). You can define these and other special messages in the code::specialMessages:: field of the device description.
For MIDI such a message has to be an Array of messages, and message begins with the type of MIDI message (as you would send it with link::Classes/MIDIOut::) and then the parameters to be sent.

For example: to configure the nanoKONTROL2 to a mode where one can access its LEDs from outside, one sends it a series of sysex messages. Some manufacturers do not document such technical details, and the messages in the nanoKONTROL2 desc file are simply exact reproductions of the messages the Korg KONTROL editor sends to the device when enabling external led control (which we found in a code base of someone else again). If your device responds special messages to tune its behavior, you can find out what they are  from the manual, by monitoring its configuration software, or get the info from someone who found this out and documented it (online, forums etc.)

code::
(
	specialMessages: (
	enableLEDControl:
	[
		[ \sysex, Int8Array[ 0xF0, 0x7E, 0x7F, 0x06, 0x01, 0xF7 ] ],
		[ \sysex, Int8Array[ 0xF0, 0x42, 0x40, 0x00, 0x01, 0x13, 0x00, 0x1F, 0x12, 0x00, 0xF7] ],
		[ \sysex, Int8Array[ 0xF0, 0x7E, 0x7F, 0x06, 0x01, 0xF7 ] ],
		//	... incomplete
])
)
::

If the device expects control messages, it would look like this:

code::
(
specialMessages: (
	activateTurboBoost:
[
	[ \control, 0, 3, 64 ], // message type name, chan, control, value
	// .. and others
])
)
::


